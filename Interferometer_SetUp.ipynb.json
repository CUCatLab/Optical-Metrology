{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#this is the simualtion code for a set up with 2 polarizing beam splitters, 4 HWPs, 1 polarizer, 1 normal beamsplitter, and a mirror\n",
    "\n",
    "#polarization x1= polarization rotation angle one\n",
    "#polarization x2= polarization rotation angle two\n",
    "#polarization x3= polarization rotation angle three\n",
    "\n",
    "\"________________________________________________________________________________________________________________________________________________\"\n",
    "# Half Waveplate function\n",
    "# x = rotation angle of HWP\n",
    "def HWP(x1):\n",
    "    hwp = np.array(([np.cos(x1)**2 - np.sin(x1)**2, 2*np.cos(x1)*np.sin(x1)], [2*np.cos(x1)*np.sin(x1), np.sin(x1)**2 - np.cos(x1)**2])) #half waveplate matrix\n",
    "# simplifiy HWP with trig identities\n",
    "    return(hwp)\n",
    "\n",
    "# polarizer with leakage\n",
    "def pol(n=.1):\n",
    "    hp = np.array([[np.sqrt(1-n**2), 0],[0, n]]) #polarizer\n",
    "    return(hp)\n",
    "\n",
    "def PHWP(x1,n = .1):\n",
    "    hwp = np.array(([np.cos(x1)**2 - np.sin(x1)**2, 2*np.cos(x1)*np.sin(x1)], [2*np.cos(x1)*np.sin(x1), np.sin(x1)**2 - np.cos(x1)**2]))\n",
    "    p = pol(n)\n",
    "    Thwp = hwp.transpose()\n",
    "    PHW = Thwp @ pol(n) @ hwp\n",
    "\n",
    "# polarizer on rotation mount\n",
    "def rm(x1,n=.1):\n",
    "    RM = np.array([[np.cos(np.deg2rad(x1)),-np.sin(np.deg2rad(x1))],[np.sin(np.deg2rad(x1)),np.cos(np.deg2rad(x1))]])\n",
    "    p = pol(n=n)\n",
    "    RMT = RM.transpose()\n",
    "    R = RM @ p @ RMT\n",
    "    return(R)\n",
    "\n",
    "\n",
    "\"__________________________________________________________________________________________________________________________________\"\n",
    "\n",
    "# Look to see if you have to do transpose of HWP\n",
    "\n",
    "\n",
    "def IH(x1,x3,thetamin = 135, thetamax = 145):\n",
    "    x4 = 0\n",
    "    #make a function that spits out whatever your lights going to be depending on polarization (nothing should be set since we can )\n",
    "    \"gives the intensity going to the dark port\"\n",
    "    L = np.array([1,0]) # laser light going into interferometer horizonatlly polarized\n",
    "    acw = HWP(-x1) @ pol(n=.1) @ HWP(x1) # polarizer 1 with light coming in at a clockwise direction ( HWP @ pol@ )make sure both HWP can have dif angles\n",
    "    accw = HWP(x1) @ pol(n=.1) @ HWP(-x1) # polarizer 1 with light coming in at a counterclockwise direction\n",
    "    ccw = HWP(-x3) @ pol(n=.1) @ HWP(x3) # polarizer 3 with light coming in at a clockwise direction\n",
    "    cccw = HWP(x3) @ pol(n=.1) @ HWP(-x3) # polarizer 3 with light coming in at a counterclockwise direction\n",
    "    #d = rm(x4,n=0) # perfect polarizer between exiting light and detector\n",
    "    DI = [] # darkport intensity\n",
    "    x2s = np.arange(thetamin,thetamax,.1) # making an array of all the different rotation angles of polarizer between set max and min angles\n",
    "\n",
    "    # should I do the - signs opposite to try and get the proper directions of the light????????\n",
    "    \n",
    "    for x2 in x2s: \n",
    "        \"iterating over all the different angles to get insentities at that set angle and putting the intensities into a list\"\n",
    "        bcw = rm(x2,n=.1) # polarizer 2 with light coming in at a clockwise direction\n",
    "        bccw = rm(-x2,n=.1) # polarizer 2 with light coming in at a counterclockwise direction\n",
    "        A = (((cccw@ bccw@ accw) -(acw@ bcw@ ccw))/2)\n",
    "        B = ((accw@ bccw@ cccw-ccw@ bcw@ acw)/2)\n",
    "        C = (L@(A) @ (B)@ L)\n",
    "        DI.append(C)\n",
    "    \n",
    "    \n",
    "    return(x2s,np.array(DI))\n",
    "\n",
    "\n",
    "def IV(x1,x3,thetamin = 135, thetamax = 145):\n",
    "    \"gives the intensity going to the bright port\"\n",
    "    x4=90\n",
    "    L = np.array([1,0])\n",
    "    acw = HWP(-x1) @ pol(n=.1) @ HWP(x1)\n",
    "    accw = HWP(x1) @ pol(n=.1) @ HWP(-x1)\n",
    "    ccw = HWP(-x3) @ pol(n=.1) @ HWP(x3)\n",
    "    cccw = HWP(x3) @ pol(n=.1) @ HWP(-x3)\n",
    "    d = rm(x4,n=0)\n",
    "    BI = []\n",
    "    x2s = np.arange(thetamin,thetamax,.1)\n",
    "\n",
    "    for x2 in x2s:\n",
    "        bcw = rm(x2,n=.1)\n",
    "        bccw = rm(-x2,n=.1)\n",
    "        A = (((cccw@ bccw@ accw) -(acw@ bcw@ ccw))/2) #changed from  + to -\n",
    "        B = ((accw@ bccw@ cccw-ccw@ bcw@ acw)/2)\n",
    "        C = (L@(A)@ d@ (B)@ L)\n",
    "        BI.append(C)\n",
    "\n",
    "    # make cccw@ bccw@ accw  and acw@ bcw@ ccw sepearate func to look light to see what they look like at those points write so consistant with written math\n",
    "    \n",
    "    return(x2s,np.array(BI))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def vertical(x1,x3,thetamin, thetamax):\n",
    "    \"this plots the the vertical light coming out of the dark port\"\n",
    "    x2s,Br = IV(x1,x3,thetamin, thetamax)\n",
    "    f=plt.figure(figsize=(4,3))\n",
    "\n",
    "    plt.plot(x2s,Br,color=\"purple\")\n",
    "    plt.xlabel(r'$\\phi$ (deg)')\n",
    "    plt.ylabel(r'$I_b/I_0$')\n",
    "    plt.title('Vertical Dark Port Intensity vs Polarizer Angle')\n",
    "    #plt.ylim((.02,.08))\n",
    "    plt.grid(True)\n",
    "    plt.xlim((thetamin,thetamax))\n",
    "    plt.show()\n",
    "    return(f)\n",
    "\n",
    "def horizontal(x1,x3,thetamin, thetamax):\n",
    "    \"this plots the horizontal light coming out of the darkport\"\n",
    "    x2s,Da = IH(x1,x3,thetamin, thetamax)\n",
    "    f=plt.figure(figsize=(4,3))\n",
    "\n",
    "    plt.plot(x2s,Da,color=\"magenta\")\n",
    "    plt.xlabel(r\"$\\phi$ (deg)\")\n",
    "    plt.ylabel(r\"$I_d/I_0$\")\n",
    "    plt.title(\"Horizontal Dark Port Intensity vs Polarizer Angle\")\n",
    "    #plt.ylim((.02,.08))\n",
    "    plt.grid(True)\n",
    "    plt.xlim((thetamin,thetamax))\n",
    "    plt.show()\n",
    "    return(f)\n",
    "\n",
    "def split(x1,x3,thetamin, thetamax):\n",
    "    \"bright port minus dark ratio to total initial intensity\"\n",
    "\n",
    "    x2s,Br = IV(x1,x3,thetamin, thetamax)\n",
    "    x2s,Da = IH(x1,x3,thetamin, thetamax )\n",
    "    s = Da-Br / (Da+Br)\n",
    "    f=plt.figure(figsize=(4,3))\n",
    "\n",
    "    plt.plot(x2s,s,color=\"aqua\")\n",
    "    plt.xlabel(r'$\\phi$ (deg)')\n",
    "    plt.ylabel(r'$(I_d-I_b)/(I_b+I_d)$')\n",
    "    plt.title('Intensity Difference')\n",
    "    #plt.ylim((-1,0.25))\n",
    "    plt.xlim((thetamin,thetamax))\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "    return(f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Intesity going to darkport\n",
    "\n",
    "x1 = 100\n",
    "x3 = -40\n",
    "thetamin=0\n",
    "thetamax = 180\n",
    "\n",
    "\n",
    "DP = horizontal(x1,x3,thetamin, thetamax)\n",
    "DP.savefig(\"DP.png\",dpi=600,pad_inches= 0.25,bbox_inches=\"tight\")\n",
    "# Intesity going to brightport\n",
    "\n",
    "BP = vertical(x1,x3,thetamin, thetamax)\n",
    "BP.savefig(\"BP.png\",dpi=600,pad_inches=0.25,bbox_inches=\"tight\")\n",
    "\n",
    "SP = split(x1,x3,thetamin, thetamax)\n",
    "SP.savefig(\"SP.png\", dpi=600,pad_inches=0.25,bbox_inches=\"tight\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
